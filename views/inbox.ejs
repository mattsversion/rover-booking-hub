<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, viewport-fit=cover">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="default">
<link rel="apple-touch-icon" href="/public/icon-192.png">
<link rel="manifest" href="/manifest.webmanifest">

<noscript>
  <div class="card" style="background:#fff3cd;border:1px solid #ffe08a">
    JavaScript is required for notifications and tabs.
  </div>
</noscript>

<!-- Push enable CTA -->
<div class="card" id="push-setup" style="display:none; margin-bottom:10px;">
  <b>Enable push notifications?</b>
  <div class="muted">Get alerts on your iPhone even when the app is closed.</div>
  <div class="actions" style="margin-top:8px; gap:8px;">
    <button class="ghost" type="button" onclick="enablePush()">Enable notifications</button>
    <button class="ghost" type="button" onclick="resetPush()" style="display:none" id="push-reset">Reset</button>
  </div>
</div>

<!-- (Optional) tiny status line so we can see current state -->
<div id="push-state" class="muted" style="display:none; margin:-4px 0 10px 2px; font-size:12px;"></div>

<script>
  const VAPID_PUBLIC_KEY = '<%= process.env.VAPID_PUBLIC_KEY ? process.env.VAPID_PUBLIC_KEY : "" %>';

  // Register SW as early as possible so we can check subscription state
  let swReg = null;

  document.addEventListener('DOMContentLoaded', () => {
    initPushUI().catch(console.error);
  });

  async function initPushUI(){
    const supported = ('serviceWorker' in navigator) && ('PushManager' in window) && VAPID_PUBLIC_KEY;
    if (!supported) return; // older browser or missing key

    // Always register; iOS requires the SW under the app‚Äôs scope.
    swReg = await navigator.serviceWorker.register('/sw.js');
    await navigator.serviceWorker.ready; // wait until active

    // Determine: permission + whether a subscription exists
    const perm = (window.Notification ? Notification.permission : 'unsupported');
    const sub  = await swReg.pushManager.getSubscription().catch(()=>null);

    // Show status helper (for debugging UX)
    setPushStatus({ perm, hasSub: !!sub });

    // Show CTA when:
    // - permission is default (not yet decided) OR denied (offer reset help), OR
    // - permission is granted BUT there's NO subscription yet
    const needSubscribe = (perm === 'granted' && !sub);
    const shouldShow = (perm !== 'granted') || needSubscribe;

    document.getElementById('push-setup').style.display = shouldShow ? 'block' : 'none';
    document.getElementById('push-reset').style.display = sub ? 'inline-block' : 'none';
    document.getElementById('push-state').style.display = 'block';
  }

  async function enablePush(){
    try {
      if (!swReg) {
        swReg = await navigator.serviceWorker.register('/sw.js');
        await navigator.serviceWorker.ready;
      }

      // 1) Ask permission if needed
      let perm = (window.Notification ? Notification.permission : 'unsupported');
      if (perm === 'default') perm = await Notification.requestPermission();
      if (perm !== 'granted') {
        alert('Notifications are blocked. Enable them in iOS Settings ‚ñ∏ Notifications for this app.');
        return;
      }

      // 2) If already subscribed, we‚Äôre done
      let sub = await swReg.pushManager.getSubscription();
      if (!sub) {
        // 3) Subscribe
        sub = await swReg.pushManager.subscribe({
          userVisibleOnly: true,
          applicationServerKey: urlBase64ToUint8Array('<%= process.env.VAPID_PUBLIC_KEY || "" %>')
        });
      }

      // 4) Send to server
      await fetch('/push/subscribe', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(sub)
      });

      setPushStatus({ perm: 'granted', hasSub: true });
      document.getElementById('push-setup').style.display = 'none';
      document.getElementById('push-reset').style.display = 'inline-block';
      alert('Notifications enabled ‚úÖ\nIf you installed to Home Screen, you‚Äôll now see ‚ÄúBooking Hub‚Äù in Settings ‚ñ∏ Notifications.');
    } catch (e) {
      console.error(e);
      alert('Failed to enable notifications.');
    }
  }

  async function resetPush(){
    try {
      if (!swReg) return;
      const sub = await swReg.pushManager.getSubscription();
      if (sub) await sub.unsubscribe();
      setPushStatus({ perm: (Notification.permission || 'default'), hasSub: false });
      document.getElementById('push-setup').style.display = 'block';
      document.getElementById('push-reset').style.display = 'none';
      alert('Push subscription reset. Tap ‚ÄúEnable notifications‚Äù again.');
    } catch (e) {
      console.error(e);
      alert('Could not reset subscription.');
    }
  }

  function urlBase64ToUint8Array(base64String) {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64  = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/');
    const rawData = atob(base64);
    const outputArray = new Uint8Array(rawData.length);
    for (let i=0; i<rawData.length; ++i) outputArray[i] = rawData.charCodeAt(i);
    return outputArray;
  }

  function setPushStatus({ perm, hasSub }){
    const el = document.getElementById('push-state');
    if (!el) return;
    el.textContent = `Push status ‚Äî permission: ${perm}; subscribed: ${hasSub ? 'yes' : 'no'}`;
  }
</script>


<h2 style="margin-top:0;">Inbox</h2>

<!-- top controls: segmented tabs + actions -->
<div class="segmented" role="tablist" aria-label="Inbox filters">
  <button data-tab="unread"
          class="<%= (tab||'unread')==='unread' ? 'active' : '' %>"
          role="tab" aria-selected="<%= (tab||'unread')==='unread' %>">
    Unread (<%= counts.unread %>)
  </button>
  <button data-tab="pending"
          class="<%= tab==='pending' ? 'active' : '' %>"
          role="tab" aria-selected="<%= tab==='pending' %>">
    Pending (<%= counts.pending %>)
  </button>
  <button data-tab="booked"
          class="<%= tab==='booked' ? 'active' : '' %>"
          role="tab" aria-selected="<%= tab==='booked' %>">
    Booked (<%= counts.booked %>)
  </button>
</div>


  <div style="margin-left:auto; display:flex; gap:10px; flex-wrap:wrap;">
    <a class="ghost" href="/exports/confirmed" target="_blank">Preview Confirmed</a>
    <a class="ghost" href="/exports/confirmed.pdf" target="_blank">üñ®Ô∏è Print Confirmed PDF</a>
    <a class="ghost" href="/bookings/new">+ New booking</a>
  </div>
</div>

<!-- ===== Inline helper to render a booking card (server-side EJS) ===== -->
<% function card(b){ const last = (b.messages||[])[0]; %>
  <a class="row card" href="/booking/<%= b.id %>" style="align-items:flex-start;">
    <div style="flex:1;">
      <div style="font-weight:700;"><%= b.clientName %></div>
      <div class="muted" style="font-size:12px;"><%= b.clientPhone || b.roverRelay || '‚Äî' %></div>
      <div class="muted"><b>Service:</b> <%= b.serviceType %> ‚Ä¢ <b>Dogs:</b> <%= b.dogsCount || 1 %></div>
      <div class="muted"><%= new Date(b.startAt).toLocaleString() %> ‚Üí <%= new Date(b.endAt).toLocaleString() %></div>
      <% if (last) { %>
        <div class="muted" style="margin-top:4px;">last: <%= last.direction %> ‚Ä¢ <%= new Date(last.createdAt).toLocaleString() %></div>
        <% if (last.body) { %>
          <div style="margin-top:2px;"><%= last.body.slice(0,160) %></div>
        <% } %>
      <% } %>
    </div>
    <% if ((b.messages||[]).some(m => m.direction==='IN' && m.isRead===false)) { %>
      <span style="background:#e74c3c;color:#fff;border-radius:999px;padding:2px 8px;font-size:12px;font-weight:700;align-self:flex-start;">
        NEW
      </span>
    <% } %>
  </a>
<% } %>

<!-- panels -->
<div class="tab-panels">
  <!-- Unread -->
  <div class="tab-panel <%= (tab||'unread')==='unread' ? 'active' : '' %>" id="tab-unread">
    <h3>Unread</h3>
    <div class="list">
      <% if (!unread.length) { %>
        <div class="card muted">No unread conversations.</div>
      <% } %>
      <% unread.forEach(b => { %><% card(b) %><% }) %>
    </div>
  </div>

  <!-- Pending -->
  <div class="tab-panel <%= tab==='pending' ? 'active' : '' %>" id="tab-pending">
    <h3>Pending</h3>
    <div class="list">
      <% if (!pending.length) { %>
        <div class="card muted">Nothing pending.</div>
      <% } %>
      <% pending.forEach(b => { %><% card(b) %><% }) %>
    </div>
  </div>

  <!-- Booked -->
  <div class="tab-panel <%= tab==='booked' ? 'active' : '' %>" id="tab-booked">
    <h3>Booked</h3>
    <div class="list">
      <% if (!booked.length) { %>
        <div class="card muted">No upcoming bookings.</div>
      <% } %>
      <% booked.forEach(b => { %><% card(b) %><% }) %>
    </div>
  </div>
</div>

<!-- Floating Action Button (mobile) -->
<a class="fab" href="/bookings/new" aria-label="New Booking">
  <span class="icon">Ôºã</span> New Booking
</a>

<!-- ===== Notifications + tabs JS ===== -->
<script>
  // --- Background polling (still useful alongside true push)
  let lastMessageTime = 0;
  async function checkForNewMessages(){
    try {
      const res = await fetch('/api/notifications/latest');
      const data = await res.json();
      if(data?.createdAt){
        const t = new Date(data.createdAt).getTime();
        if(t > lastMessageTime && lastMessageTime !== 0){
          notifyNewMessage();
        }
        lastMessageTime = t;
      }
    } catch(e){}
  }
  function notifyNewMessage(){
    if (!('Notification' in window)) return;
    if(Notification.permission === 'granted'){
      new Notification('üì© New Booking Message Received!');
    } else if(Notification.permission !== 'denied'){
      Notification.requestPermission().then(p => {
        if(p === 'granted') new Notification('üì© New Booking Message Received!');
      });
    }
  }
  if (window.Notification && Notification.permission === 'default'){
    setTimeout(()=> Notification.requestPermission().catch(()=>{}), 800);
  }
  setInterval(checkForNewMessages, 10000);

  // --- Segmented tabs (client-side, with smooth CSS fade)
  const btns = document.querySelectorAll('.segmented button');
  const panels = {
    unread:  document.getElementById('tab-unread'),
    pending: document.getElementById('tab-pending'),
    booked:  document.getElementById('tab-booked'),
  };
  function setActiveTab(key){
    btns.forEach(x=>{
      x.classList.toggle('active', x.dataset.tab === key);
      x.setAttribute('aria-selected', String(x.dataset.tab === key));
    });
    Object.entries(panels).forEach(([k,el])=>{
      if(!el) return;
      el.classList.toggle('active', k === key);
    });
    const url = new URL(location.href);
    url.searchParams.set('tab', key);
    history.replaceState(null, '', url);
  }
  btns.forEach(b=> b.addEventListener('click', ()=> setActiveTab(b.dataset.tab)));
  setActiveTab('<%= (tab||"unread") %>');
</script>
